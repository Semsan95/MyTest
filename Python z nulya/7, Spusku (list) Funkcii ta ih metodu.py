# Списки з даними
# Список / Масив даних - змінна, що містить декілька окремих значень, з якими можна працювати (обробляти, викликати, змінювати і т.д.)
# Кожна комірка даних в масиві називається - елемент масиву, а місце яке вона займає - індекс.
numbers = [1, 0, 'absts', True, 6.12, '142']
'''numbers[0] = "word"
print(numbers[0], numbers[1])'''

# Індекс також може бути масивом
numbers2 = [5, 6, True, False, ['walle', 7.23]]
'''print(numbers2[4][0])''' # Конструкція для виклику нульового індексу з масиву в 4му індексі

# Від"ємний індекс отримує значення з індексу в зворотній послідовності.
'''print(numbers2[-2])'''

# Вбудовані ф-ції для роботи зі списками:
# .append - додати новий елемент в кінець списку
numbers.append(45)
#print(numbers)

# .insert - втавити новий елемент в конкретний індекс, інші елементи зміщаються вправо
numbers.insert(1, '->')
#print(numbers)

# .extend - дозволяє до певного списку додати інший список
numbers.extend(numbers2)
#print(numbers)

# .sort - дозволяє посортувати список з одниковим типом даних
# False = 0, True = 1
list = [0, 14.3, 2, 9.1, True, 25, 3, 1, 2, False]
list.sort()
#print(list)

#.reverse - віддзеркалює список
list.reverse()
#print(list)

# .pop - видаляє останній елемент в списку
# .remove - видаляє конкретний елемент зі списку, який треба записати в дужках
# .clear - повністю очищує список
list.pop()
list.remove(9.1)
#print(list)
'''list.clear()
print(list)'''

# .count - дозволяє дізнатись скільки в скиску елементів з певним значенням
#print(list.count(True))

# len(назва списку) - видає кількість елементів у списку
#print(len(list))

# print(list[:3]) - виведе на екран значенння в комірках (індекс) 0, 1, 2
# print(list[5:8]) - виведе на екран значенння в комірках (індекс) 5, 6, 7


# Списки та цикли
nums = [4, 5, 1, 7.2]

for el in nums:
    res = el ** 2
    print(res)

# Практичне використання
user_count_hobby = int(input("Enter hobby number: "))

i = 0
hobby = []
while i < user_count_hobby:
    text = "Enter hobby " + str(i + 1) + ": "
    hobby.append(input(text))

    i += 1

print(hobby)
##############################################################################
'''
List (список)
Базовая структура данных в python.
Элементы в списке хранятся последовательно, каждому из них присвоены индексы, начиная с нуля.
В отличие от массива, список может хранить объекты любого типа.

В каких случаях использовать?
Для хранения элементов, объединенных каким либо признаком.
В случае, если изменение элементов и/или расширение списка не предполагается, следует использовать неизменяемый аналог - кортеж.

my_list.append(x) - добавляет x в конец списка
my_list.clear() - очищает список
my_list.copy() - возвращает копию списка my_list
my_list.count(x) - возвращает кол-во элементов со значением x
my_list.extend(x) - добавляет элементы списка x к концу списка my_list
my_list.index(x,start,end) - возвращает индекс первого найденного x, можно задать промежуток для поиска (опционально)
my_list.insert(index, x) - вставляет x на заданную позицию
my_list.pop(index) - возвращает элемент с указанным индексом и удаляет его, если индекс не указан - возвращается и удаляется последний элемент
my_list.remove(x) - удаляет первый элемент со значением x
my_list.reverse() - инвертирует порядок элементов в списке
my_list.sort(key=x) сортирует список на основе функции x
'''
##############################################################################
'''
Tuple (кортёж)
Кортеж - это неизменяемый и более быстрый аналог списка.
Он защищает хранимые данные от непреднамеренных изменений и может использоваться в качестве ключа в словарях
(словарь - ассоциативный массив в python).

В каких случаях использовать?
Для хранения данных вместо списка (если они не предполагают изменений).

my_tuple.count(x) - возвращает кол-во элементов со значением x
my_tuple.index(x,start,end) - возвращает индекс первого найденного x, можно задать промежуток для поиска (опционально)
'''
##############################################################################
'''
Set (множество)
Множество - это набор уникальных элементов в случайном порядке (неупорядоченный список).
Множества примечательны тем, что операция проверки “принадлежит ли объект множеству” происходит значительно быстрее аналогичных операций в других структурах данных.

В каких случаях использовать?
Когда необходимо проверять принадлежит ли значение набору уникальных элементов и отсутствует необходимость поддерживать порядок в данном наборе.

my_set.add(x) - добавляет x во множество
my_set.difference(x) - возвращает множество элементов my_set, которые не входят во множество x
my_set.difference_update(x) - удаляет из множества my_set все элементы, которые входят во множество x
my_set.discard(x) - удаляет элемент x из my_set
my_set.intersection(x) - возвращает элементы общие для множеств my_set и x
my_set.intersection_update(x) - удаляет из множества my_set элементы, которых нет во множестве x
my_set.isdisjoint(x) - возвращает true если my_set и x не содержат одинаковых значений
my_set.issubset(x) - возвращает true если все элементы my_set входят во множество x
my_set.issuperset(x) - возвращает true если все элементы x входят во множество my_set
my_set.pop() - возвращает и удаляет первый (на данный момент) элемент множества
my_set.remove(x) - удаляет x из множества
my_set.symmetric_difference(x) - возвращает все элементы из x и my_set, которые встречаются только в одном из множеств
my_set.symmetric_difference_update(x) - обновляет исходное множество таким образом, что оно будет состоять из всех элементов x и my_set, которые встречаются только в одном из множеств
my_set.union(x) - возвращает новое множество, состоящее из всех элементов x и my_set
my_set.update(x) - добавляет в my_set все элементы x
'''
##############################################################################